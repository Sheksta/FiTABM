View(run_model_gen)
flow_view(run_model, engine = "plantuml", out = "Diagrams/run_model.png", nested_fun = NULL)
remotes::install_github("DataKnowledge/DependenciesGraphs")
library(DependenciesGraphs)
?DependenciesGraphs
??DependenciesGraphs
deps <- envirDependencies()
deps <- envirDependencies(globalenv())
deps <- envirDependencies("globalenv")
deps <- funDependencies("run_model")
deps <- funDependencies(".GlobalEnv", "run_model")
plot(deps)
deps <- funDependencies(".GlobalEnv")
deps <- funDependencies(".GlobalEnv","batch_run_func")
plot(deps)
plot(deps)
plot(deps)
deps <- funDependencies(".GlobalEnv","run_model_f")
plot(deps)
deps <- funDependencies(".GlobalEnv","run_model_f")
plot(deps)
deps <- funDependencies(".GlobalEnv","run_model")
plot(deps)
??DependenciesGraphs
plot(deps, block = T)
plot(deps)
flow_view(run_model, engine = "plantuml", out = "Diagrams/run_model.png", nested_fun = NULL, prefix = "#")
View(extract)
View(run_model)
install.packages("CodeDepends")
library(CodeDepends)
#For CodeDepends, needs "graph" package. source("https://bioconductor.org/biocLite.R") biocLite("graph")
source("https://bioconductor.org/biocLite.R")
#For CodeDepends, needs "graph" package. source("https://bioconductor.org/biocLite.R") biocLite("graph")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.12")
BiocManager::install(c("graph"))
install.packages("graph")
library(graph)
library(CodeDepends)
?CodeDepends
??CodeDepends
?system.file
install.packages("Rgraphviz")
if(require(Rgraphviz))
print("hello")
BiocManager::install(c("graph", "Rgraphviz"))
library(Rgraphviz)
library(graph)
library(CodeDepends)
f = system.file('01-required_functions.R', '02-run_functions.R', 'examples.R', package = "CodeDepends")
f = system.file('01-required_functions.R', '02-run_functions.R', 'examples.R')
f = system.file('01-required_functions.R', '02-run_functions.R', 'examples.R')
sc = readScript(f)
g = makeVariableGraph( info = getInputs(sc))
f = system.file('01-required_functions.R')
sc = readScript(f)
g = makeVariableGraph( info = getInputs(sc))
f = system.file("01-required_functions.R")
f = system.file("./01-required_functions.R")
source('01-required_functions.R')
source('02-run_functions.R')
source('02-run_functions.R')
source('01-required_functions.R')
f = system.file("C:\\Users\\vargh\\OneDrive - Queensland University of Technology\\University Studies\\Year 5\\Thesis\\R Project\\FiTABM\\01-required_functions.R")
f = "01-required_functions.R"
sc = readScript(f)
g = makeVariableGraph( info = getInputs(sc))
plot(g)
?readScript
f = c("01-required_functions.R", '02-run_functions.R')
sc = readScript(f)
sc = readScript("01-required_functions.R", '02-run_functions.R')
sc = readScript("examples.R")
g = makeVariableGraph( info = getInputs(sc))
plot(g)
sc = readScript(f[2])
g = makeVariableGraph( info = getInputs(sc))
plot(g)
renderGraph(g)
f = c("01-required_functions.R", '02-run_functions.R')
sc = readScript(f[2])
gg = makeVariableGraph( info = getInputs(sc))
gg = layoutGraph(gg, layoutType = "circo")
graph.par(list(nodes = list(fontsize=55)))
renderGraph(gg) ## could also call plot directly
dtm = getDetailedTimelines(sc, getInputs(sc))
plot(dtm)
# A big/long function
info = getInputs(run_model)
dtm = getDetailedTimelines(info = info)
plot(dtm, var.cex = .7, mar = 4, srt = 30)
gg %>% class()
class(gg)
View(g)
plot(gg, "twopi")
install.packages("GGally")
library(GGally)
library(network)
install.packages("network")
install.packages("sna")
install.packages("ggplot2")
install.packages("ggplot2")
library(network)
library(sna)
library(ggplot2)
library(GGally)
ggnet2(gg)
ggnet2(g)
install.packages("intergraph")
library(intergraph)
asNetwork(gg)
topgo.igraph <- graph_from_graphnel(gg,name=TRUE,weight=F,unlist.attrs=TRUE)
?makeVariableGraph
topgo.igraph <- graph_from_graphnel(gg,name=TRUE,weight=F,unlist.attrs=TRUE)
library(igraph)
topgo.igraph <- graph_from_graphnel(gg,name=TRUE,weight=F,unlist.attrs=TRUE)
asNetwork(gg)
asNetwork(topgo.igraph)
net_gg <- asNetwork(topgo.igraph)
ggnet2(net_gg)
topgo.igraph <- graph_from_graphnel(gg,name=TRUE,weight=F,unlist.attrs=F)
net_gg <- asNetwork(topgo.igraph)
ggnet2(net_gg)
ggnet2(net_gg, size = 12, label = TRUE, label.size = 5)
ggnet2(net_gg, color = "grey15", size = 12, label = TRUE, label.color = "color") +
theme(panel.background = element_rect(fill = "grey15"))
ggnet2(net_gg, color = "grey15", size = 12, label = TRUE) +
theme(panel.background = element_rect(fill = "grey15"))
ggnet2(net_gg, color = "grey15", size = 12, label = TRUE, label.color = "white") +
theme(panel.background = element_rect(fill = "grey15"))
ggnet2(net_gg, color = "grey15", size = 12, label = TRUE, label.color = "white", arrow.size = 12, arrow.gap = 0.025) +
theme(panel.background = element_rect(fill = "grey15"))
f1 = system.file("samples", "results-multi.R", package = "CodeDepends")
sc1 = readScript(f1)
g1 = makeVariableGraph( info = getInputs(sc1))
if(require(Rgraphviz))
plot(g1)
f = c("01-required_functions.R", '02-run_functions.R')
sc = readScript(f[2])
gg = makeCallGraph( info = getInputs(sc))
plot(gg, "twopi")
plot(gg)
gg = layoutGraph(gg, layoutType = "circo")
graph.par(list(nodes = list(fontsize=55)))
renderGraph(gg) ## could also call plot directly
topgo.igraph <- graph_from_graphnel(gg,name=TRUE,weight=F,unlist.attrs=F)
net_gg <- asNetwork(topgo.igraph)
ggnet2(net_gg, color = "grey15", size = 12, label = TRUE, label.color = "white", arrow.size = 12, arrow.gap = 0.025) +
theme(panel.background = element_rect(fill = "grey15"))
f = c("01-required_functions.R", '02-run_functions.R')
sc = readScript(f[1])
gg = makeVariableGraph( info = getInputs(sc))
plot(gg)
gg = layoutGraph(gg, layoutType = "circo")
graph.par(list(nodes = list(fontsize=55)))
renderGraph(gg) ## could also call plot directly
topgo.igraph <- graph_from_graphnel(gg,name=TRUE,weight=F,unlist.attrs=F)
net_gg <- asNetwork(topgo.igraph)
ggnet2(net_gg, color = "grey15", size = 12, label = TRUE, label.color = "white", arrow.size = 12, arrow.gap = 0.025) +
theme(panel.background = element_rect(fill = "grey15"))
# A big/long function
info = getInputs(run_model)
f = c("Github Issues/a_very_long_function.R")
sc = readScript(f[1])
gg = makeVariableGraph( info = getInputs(sc))
plot(gg)
# plot(gg)
# gg = layoutGraph(gg, layoutType = "circo")
# graph.par(list(nodes = list(fontsize=55)))
# renderGraph(gg) ## could also call plot directly
topgo.igraph <- graph_from_graphnel(gg,name=TRUE,weight=F,unlist.attrs=F)
net_gg <- asNetwork(topgo.igraph)
ggnet2(net_gg, color = "grey15", size = 12, label = TRUE, label.color = "white", arrow.size = 12, arrow.gap = 0.025) +
theme(panel.background = element_rect(fill = "grey15"))
f = c("Github Issues/a_very_long_function.R")
sc = readScript(f[1])
gg = makeVariableGraph( info = getInputs(sc))
# plot(gg)
# gg = layoutGraph(gg, layoutType = "circo")
# graph.par(list(nodes = list(fontsize=55)))
# renderGraph(gg) ## could also call plot directly
topgo.igraph <- graph_from_graphnel(gg,name=TRUE,weight=F,unlist.attrs=F)
net_gg <- asNetwork(topgo.igraph)
ggnet2(net_gg, color = "grey15", size = 12, label = TRUE, label.color = "white", arrow.size = 12, arrow.gap = 0.025) +
theme(panel.background = element_rect(fill = "grey15"))
View(net_gg)
# A big/long function
info = getInputs(run_model)
dtm = getDetailedTimelines(info = info)
plot(dtm, var.cex = .7, mar = 4, srt = 30)
gg = makeVariableGraph( info = getInputs(.GlobalEnv))
gg = makeVariableGraph( info = getInputs(run_model))
# plot(gg)
# gg = layoutGraph(gg, layoutType = "circo")
# graph.par(list(nodes = list(fontsize=55)))
# renderGraph(gg) ## could also call plot directly
topgo.igraph <- graph_from_graphnel(gg,name=TRUE,weight=F,unlist.attrs=F)
net_gg <- asNetwork(topgo.igraph)
ggnet2(net_gg, color = "grey15", size = 12, label = TRUE, label.color = "white", arrow.size = 12, arrow.gap = 0.025) +
theme(panel.background = element_rect(fill = "grey15"))
plot(gg)
# A big/long function
info = getInputs(run_model)
dtm = getDetailedTimelines(info = info)
plot(dtm, var.cex = .7, mar = 4, srt = 30)
par(bg = 'black')
plot(gg)
par(bg = 'white')
plot(gg)
gg = makeVariableGraph( info = getInputs(run_model))
par(bg = 'blue')
plot(gg)
plot(gg)
gg = makeVariableGraph( info = getInputs(batch_run_func))
par(bg = 'blue')
plot(gg)
# gg = layoutGraph(gg, layoutType = "circo")
# graph.par(list(nodes = list(fontsize=55)))
# renderGraph(gg) ## could also call plot directly
topgo.igraph <- graph_from_graphnel(gg,name=TRUE,weight=F,unlist.attrs=F)
net_gg <- asNetwork(topgo.igraph)
ggnet2(net_gg, color = "grey15", size = 12, label = TRUE, label.color = "white", arrow.size = 12, arrow.gap = 0.025) +
theme(panel.background = element_rect(fill = "grey15"))
library(DependenciesGraphs)
deps <- funDependencies(".GlobalEnv","run_model")
plot(deps)
# A big/long function
info = getInputs(run_model)
dtm = getDetailedTimelines(info = info)
plot(dtm)#, var.cex = .7, mar = 4, srt = 30)
# Say we want to run the realistic historical scenario (e.g. the one that
# is designed to mimic what actually happened in the Great Britain 2010-2016.)
# This is the default for the data loading function:
source('01-required_functions.R')
source('02-run_functions.R')
View(load_data)
View(set_FiT)
load_data()
install.packages("reshape2")
load_data()
c(2016, 17.33)
elec_price_time[7,]
elec_price_time[7,] <- c(2016, 17.33)
elec_price_time[7,1:2] <- c(2016, 17.33)
elec_price_time[7,] <- [2016, 17.33]
elec_price_time[7,] <- list(2016, 17.33)
View(elec_price_time)
View(elec_price_time)
load_data()
# Say we want to run the realistic historical scenario (e.g. the one that
# is designed to mimic what actually happened in the Great Britain 2010-2016.)
# This is the default for the data loading function:
source('01-required_functions.R')
source('02-run_functions.R')
load_data()
# Say we want to run the realistic historical scenario (e.g. the one that
# is designed to mimic what actually happened in the Great Britain 2010-2016.)
# This is the default for the data loading function:
source('01-required_functions.R')
source('02-run_functions.R')
load_data()
View(deployment)
View(elec_price_time)
View(FiT)
View(kW_price)
View(LF)
results <- batch_run_func(number_of_runs = 10, number_of_agents = 500)
deps <- funDependencies(".GlobalEnv","load_data")
plot(deps)
flow_view(load_data, engine = c("nomnoml", "plantuml")[2], out = "Diagrams/load_data_plantUML.png")
library(flow)
library(plantuml)
source('02-run_functions.R')
source('01-required_functions.R')
flow_view(load_data, engine = c("nomnoml", "plantuml")[2], out = "Diagrams/load_data_plantUML.png")
flow_view(load_data, engine = c("nomnoml", "plantuml")[1], out = "Diagrams/load_data_flow.png")
flow_view(set_FiT, engine = c("nomnoml", "plantuml")[1], out = "Diagrams/set_FiT_flow.png")
View(set_FiT)
View(FiT)
View(set_dep_caps)
View(load_data)
means <- read_csv("Data/mean-electricity.csv", col_types = cols())
medians <- read_csv("Data/median-electricity.csv", col_types = cols())
View(means)
View(medians)
for (i in 1:5){
mean <- means[[i+1]]
median <- medians[[i+1]]
mus[[i]] <<- log(median)
sigmas[[i]] <<- sqrt(2*log(mean/median))
}
mus <<- data.frame(matrix(ncol = 5, nrow = 10))
sigmas <<- data.frame(matrix(ncol = 5, nrow = 10))
View(sigmas)
for (i in 1:5){
mean <- means[[i+1]]
median <- medians[[i+1]]
mus[[i]] <<- log(median)
sigmas[[i]] <<- sqrt(2*log(mean/median))
}
mus <<- data.frame(matrix(ncol = 5, nrow = 10))
sigmas <<- data.frame(matrix(ncol = 5, nrow = 10))
for (i in 1:5){
mean <- means[[i+1]]
median <- medians[[i+1]]
mus[[i]] <<- log(median)
sigmas[[i]] <<- sqrt(2*log(mean/median))
}
for (i in 1:5){
mean <- means[[i+1]]
median <- medians[[i+1]]
mus[[i]] <<- log(median)
sigmas[[i]] <<- sqrt(2*log(mean/median))
}
means <- read_csv("Data/mean-electricity.csv", col_types = cols())
medians <- read_csv("Data/median-electricity.csv", col_types = cols())
mus <<- data.frame(matrix(ncol = 5, nrow = 10))
sigmas <<- data.frame(matrix(ncol = 5, nrow = 10))
for (i in 1:5){
mean <- means[[i+1]]
median <- medians[[i+1]]
mus[[i]] <<- log(median)
sigmas[[i]] <<- sqrt(2*log(mean/median))
}
load_data()
load_data()
# Say we want to run the realistic historical scenario (e.g. the one that
# is designed to mimic what actually happened in the Great Britain 2010-2016.)
# This is the default for the data loading function:
source('01-required_functions.R')
source('02-run_functions.R')
load_data()
View(deployment)
# Say we want to run the realistic historical scenario (e.g. the one that
# is designed to mimic what actually happened in the Great Britain 2010-2016.)
# This is the default for the data loading function:
source('01-required_functions.R')
source('02-run_functions.R')
View(load_data)
means <- read_csv("Data/mean-electricity.csv", col_types = cols())
medians <- read_csv("Data/median-electricity.csv", col_types = cols())
mus <<- data.frame(matrix(ncol = 5, nrow = 10))
sigmas <<- data.frame(matrix(ncol = 5, nrow = 10))
for (i in 1:5){
mean <- means[[i+1]]
median <- medians[[i+1]]
mus[[i]] <- log(median)
sigmas[[i]] <- sqrt(2*log(mean/median))
}
income_thresh <- means$income
rm(mean, median, i, means, medians)
means <- read_csv("Data/mean-electricity.csv", col_types = cols())
medians <- read_csv("Data/median-electricity.csv", col_types = cols())
View(means)
View(medians)
means[[1+1]]
flow_view(load_data, engine = c("nomnoml", "plantuml")[1], out = "Diagrams/Code Reading/set_FiT_flow.png")
flow_view(load_data, engine = c("nomnoml", "plantuml")[1], out = "Diagrams/Code Reading/load_data_flow.png")
flow_view(load_data, engine = c("nomnoml", "plantuml")[1], out = "Diagrams/Code Reading/load_data_flow.png", prefix = "#")
flow_view(load_data, engine = c("nomnoml", "plantuml")[1], out = "Diagrams/Code Reading/load_data_flow.png", prefix = "!")
flow_view(load_data, engine = c("nomnoml", "plantuml")[1], out = "Diagrams/Code Reading/load_data_flow.png", prefix = "#!")
?flow_view
flow_view(load_data, engine = c("nomnoml", "plantuml")[1], out = "Diagrams/Code Reading/load_data_flow.png", prefix = "#!")
flow_view(load_data, engine = c("nomnoml", "plantuml")[1], out = "Diagrams/Code Reading/load_data_flow.png", prefix = "##")
flow_view(load_data, engine = c("nomnoml", "plantuml")[1], out = "Diagrams/Code Reading/load_data_flow.png", prefix = "#Header:")
flow_view(load_data, engine = c("nomnoml", "plantuml")[1], out = "Diagrams/Code Reading/load_data_flow.png", prefix = "Header:")
flow_view(load_data, engine = c("nomnoml", "plantuml")[1], out = "Diagrams/Code Reading/load_data_flow.png", prefix = "# Header:")
# Say we want to run the realistic historical scenario (e.g. the one that
# is designed to mimic what actually happened in the Great Britain 2010-2016.)
# This is the default for the data loading function:
source('01-required_functions.R')
source('02-run_functions.R')
load_data()
View(deployment)
View(deployment)
deps <- funDependencies(".GlobalEnv","batch_run_func")
plot(deps)
flow_view(batch_run_func, engine = c("nomnoml", "plantuml")[1], out = "Diagrams/Code Reading/batch_run_func_flow.png")
results <- batch_run_func(number_of_runs = 10, number_of_agents = 500)
View(results)
results <- batch_run_func(number_of_runs = 10, number_of_agents = 500, plot_u = T, plot_cost = T, plot_prod = T)
View(append_results)
results[[1]][["mean_u_inc"]]
results[[1]]$time_series %>% length()
View(cum_prod)
View(batch_run_func_f)
View(batch_run_func)
View(initialise_vars)
View(calc_prod)
View(calc_prod)
View(calc_prod)
View(initialise_vars)
View(append_results)
View(calc_prod)
# Say we want to run the realistic historical scenario (e.g. the one that
# is designed to mimic what actually happened in the Great Britain 2010-2016.)
# This is the default for the data loading function:
source('01-required_functions.R')
source('02-run_functions.R')
View(run_model)
View(run_model)
flow_view(batch_run_func, engine = c("nomnoml", "plantuml")[1], out = "Diagrams/Code Reading/run_model_func_flow.png")
library(DependenciesGraphs)
deps <- funDependencies(".GlobalEnv","batch_run_func")
plot(deps)
View(run_model)
View(Household_Agent)
profvis::profvis({
source('01-required_functions.R')
source('02-run_functions.R')
load_data()
# To run the simulation:
results <- batch_run_func(number_of_runs = 1, number_of_agents = 500)
})
# To run any simulations, you need to do two things:
# 1. Load the relevant data using load_data() or load_data_f()
# 2. Run the simulation using batch_run_func() or batch_run_func_f()
# The "_f" means that these functions are used for projections (2016-2022),
# while the other functions are for historical simulations 2010-2016.
install.packages('tidyverse')
profvis::profvis({
source('01-required_functions.R')
source('02-run_functions.R')
load_data()
# To run the simulation:
results <- batch_run_func(number_of_runs = 1, number_of_agents = 500)
})
View(batch_run_func)
View(load_data)
profvis::profvis({
source('01-required_functions.R')
source('02-run_functions.R')
load_data()
# To run the simulation:
results <- batch_run_func(number_of_runs = 1, number_of_agents = 500)
})
View(run_model)
View(load_data)
View(load_data)
# Say we want to run the realistic historical scenario (e.g. the one that
# is designed to mimic what actually happened in the Great Britain 2010-2016.)
# This is the default for the data loading function:
source('01-required_functions.R')
source('02-run_functions.R')
load_data()
# To run the simulation:
results <- batch_run_func(number_of_runs = 1, number_of_agents = 500)
View(run_model)
View(batch_run_func)
number_of_runs = 1
number_of_agents = 500
sample_for_run <- allowed_params[sample(1:nrow(allowed_params), number_of_runs, replace = TRUE), ]
if(missing(number_of_agents)) number_of_agents <- 5000
if(missing(number_of_runs)) number_of_runs <- 100
initialise_vars() # create variables which will store output
for (i1 in 1:number_of_runs) {
w <- unlist(sample_for_run[i1, 1:4])
threshold <- unlist(sample_for_run[i1, 5])
if (run_w_cap == TRUE) { # Reset to original values for new run
FiT <<- FiT_0
dep_cap <<- dep_cap_0
}
cat(i1, w, threshold, "\n")
all_res_rn <<- run_model(number_of_agents, i1, w, threshold) # run the model once
append_results() # add results of current run to previous results
}
number_of_runs = 1
number_of_agents = 500
sample_for_run <- allowed_params[sample(1:nrow(allowed_params), number_of_runs, replace = TRUE), ]
if(missing(number_of_agents)) number_of_agents <- 5000
if(missing(number_of_runs)) number_of_runs <- 100
initialise_vars() # create variables which will store output
for (i1 in 1:number_of_runs) {
w <- unlist(sample_for_run[i1, 1:4])
threshold <- unlist(sample_for_run[i1, 5])
if (run_w_cap == TRUE) { # Reset to original values for new run
FiT <<- FiT_0
dep_cap <<- dep_cap_0
}
cat(i1, w, threshold, "\n")
all_res_rn <<- run_model(number_of_agents, i1, w, threshold) # run the model once
append_results() # add results of current run to previous results
}
sample_for_run <- allowed_params[sample(1:nrow(allowed_params), number_of_runs, replace = TRUE), ]
allowed_params <- read_tsv('Data/allowed_params_1000.txt', col_names = F)
sample_for_run <- allowed_params[sample(1:nrow(allowed_params), number_of_runs, replace = TRUE), ]
if(missing(number_of_agents)) number_of_agents <- 5000
if(missing(number_of_runs)) number_of_runs <- 100
initialise_vars() # create variables which will store output
for (i1 in 1:number_of_runs) {
w <- unlist(sample_for_run[i1, 1:4])
threshold <- unlist(sample_for_run[i1, 5])
if (run_w_cap == TRUE) { # Reset to original values for new run
FiT <<- FiT_0
dep_cap <<- dep_cap_0
}
cat(i1, w, threshold, "\n")
all_res_rn <<- run_model(number_of_agents, i1, w, threshold) # run the model once
append_results() # add results of current run to previous results
}
allowed_params <- read_tsv('Data/allowed_params_1000.txt', col_names = F)
sample_for_run <- allowed_params[sample(1:nrow(allowed_params), number_of_runs, replace = TRUE), ]
w <- unlist(sample_for_run[1, 1:4])
threshold <- unlist(sample_for_run[1, 5])
all_res_rn <<- run_model(number_of_agents, i1, w, threshold) # run the model once
profvis::profvis({
w <- unlist(sample_for_run[1, 1:4])
threshold <- unlist(sample_for_run[1, 5])
all_res_rn <<- run_model(number_of_agents, i1, w, threshold) # run the model once
})
